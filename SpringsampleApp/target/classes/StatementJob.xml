<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/batch"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:util="http://www.springframework.org/schema/beans"
             xsi:schemaLocation="http://www.springframework.org/schema/batch
                                 http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
                                 http://www.springframework.org/schema/beans
                                 http://www.springframework.org/schema/beans/spring-beans-4.0.xsd">
    <beans:import resource="launch-context.xml"/>


    <beans:bean id="customerTransactionFile" class="org.springframework.core.io.FileSystemResource">
        <beans:constructor-arg value="input/customertransaction.csv"/>
    </beans:bean>

    <beans:bean id="customerLineTokenizer"
                class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
        <beans:property name="names"
                        value="taxId,firstName,lastName,address,city,state,zip,accountNumber"/>
        <beans:property name="delimiter" value=","/>
    </beans:bean>

    <beans:bean id="transactionLineTokenizer"
                class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
        <beans:property name="names" value="accountNumber,stockTicker,price,quantity,timestamp"/>
        <beans:property name="delimiter" value=","/>
    </beans:bean>

    <beans:bean id="customerFieldSetMapper"
                class="com.springapp.batch.reader.CustomerFieldSetMapper"/>

    <beans:bean id="transactionFieldSetMapper"
                class="com.springapp.batch.reader.TransactionFieldSetMapper"/>

    <beans:bean id="customerTransactionLineMapper"
                class="com.springapp.batch.reader.RegularExpressionLineMapper">
        <beans:property name="lineTokenizers">
            <beans:map>
                <beans:entry key="^\d+,[A-Z][a-zA-Z]+,[A-Z][a-zA-Z]+,.*"
                             value-ref="customerLineTokenizer"/>
                <beans:entry key="^\d+,[A-Z\.\ ]+,\d+.*"
                             value-ref="transactionLineTokenizer"/>
            </beans:map>
        </beans:property>
        <beans:property name="fieldSetMappers">
            <beans:map>
                <beans:entry key="^\d+,[A-Z][a-zA-Z]+,[A-Z][a-zA-Z]+,.*"
                             value-ref="customerFieldSetMapper"/>
                <beans:entry key="^\d+,[A-Z\.\ ]+,\d+.*"
                             value-ref="transactionFieldSetMapper"/>
            </beans:map>
        </beans:property>

    </beans:bean>

    <beans:bean id="customerTransactionReader"
                class="org.springframework.batch.item.file.FlatFileItemReader">
        <beans:property name="resource" ref="customerTransactionFile"/>
        <beans:property name="lineMapper" ref="customerTransactionLineMapper"/>
    </beans:bean>

    <beans:bean id="customerLookupItemProcessor"
                class="com.springapp.batch.processor.CustomerLookupItemProcessor">
        <beans:property name="customerDao" ref="customerDao"/>
        <beans:property name="tickerDao" ref="tickerDao"/>
        <beans:property name="accountDao" ref="accountDao"/>
    </beans:bean>

    <beans:bean id="customerDao"
                class="com.springapp.batch.dao.impl.CustomerDaoJdbc">
        <beans:property name="dataSource" ref="dataSource"/>
    </beans:bean>

    <beans:bean id="tickerDao"
                class="com.springapp.batch.dao.impl.TickerDaoJdbc">
        <beans:property name="dataSource" ref="dataSource"/>
    </beans:bean>

    <beans:bean id="accountDao"
                class="com.springapp.batch.dao.impl.AccountDaoJdbc">
        <beans:property name="dataSource" ref="dataSource"/>
    </beans:bean>


    <beans:bean id="customerImportWriter"
                class="org.springframework.batch.item.database.JdbcBatchItemWriter">
        <beans:property name="dataSource" ref="dataSource"/>
        <beans:property name="sql"
                        value="update customer set firstName = :firstName, lastName = :lastName, address1 = :address.address1, city = :address.city, state = :address.state, zip = :address.zip where ssn = :taxId"/>
        <beans:property name="itemSqlParameterSourceProvider">
            <beans:bean
                    class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider"/>
        </beans:property>
    </beans:bean>

    <beans:bean id="transactionImportWriter"
                class="org.springframework.batch.item.database.JdbcBatchItemWriter">
        <beans:property name="dataSource" ref="dataSource"/>
        <beans:property name="sql"
                        value="insert into transaction (transactionType, executedTime, dollarAmount, qty,
tickerId, account_id) values (:type.intValue, :tradeTimestamp, :dollarAmount, :quantity, :tickerId, :accountId)"/>
        <beans:property name="itemSqlParameterSourceProvider">
            <beans:bean
                    class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider"/>
        </beans:property>
    </beans:bean>

    <beans:bean id="customerTransactionItemWriter"
                class="org.springframework.batch.item.support.ClassifierCompositeItemWriter">
        <beans:property name="classifier">
            <beans:bean class="org.springframework.batch.classify.SubclassClassifier">
                <beans:property name="typeMap">
                    <beans:map>
                        <beans:entry key="com.springapp.batch.domain.Customer"
                                     value-ref="customerImportWriter"/>
                        <beans:entry key="com.springapp.batch.domain.Transaction"
                                     value-ref="transactionImportWriter"/>
                    </beans:map>
                </beans:property>
            </beans:bean>
        </beans:property>
    </beans:bean>

    <step id="importCustomerAndTransactionData">
        <tasklet>
            <chunk reader="customerTransactionReader" processor="customerLookupItemProcessor"
                   writer="customerTransactionItemWriter" commit-interval="100"/>
        </tasklet>
    </step>

    <job id="StatementJob">
        <step id="step1" parent="importCustomerAndTransactionData"/>
    </job>

</beans:beans>
