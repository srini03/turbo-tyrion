<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch-3.0.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd">
		
    <import resource="classpath:context-datasource.xml"/> 
     
	<!-- JobRepository and JobLauncher are configuration/setup classes -->
	<bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean" />

	<bean id="jobLauncher" 	class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>


	<!-- ItemWriter which writes data to database -->
    <bean id="databaseItemWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter">
        <property name="dataSource" ref="dataSource" />
        <property name="sql">
             <value>          
                <![CDATA[        
                    insert into EXAM_RESULT(STUDENT_NAME, DOB, PERCENTAGE) 
                    values (?, ?, ?)
                ]]>
            </value>
        </property>
 
        <!-- We need a custom setter to handle the conversion between Jodatime LocalDate and MySQL DATE -->
        <property name="ItemPreparedStatementSetter">
            <bean class="com.batch.test.ExamItemPreparedStatement" />
        </property>
      
     <!--   <property name="itemSqlParameterSourceProvider">
          <bean class="com.batch.test.FieldSetSqlParameterSourceProvider" />
      </property>
      -->
            
  </bean>

	<!-- ItemReader which reads data from Flat file -->
	<bean id="reader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">  
          <property name="resource" value="file:csv/examResultinput.txt" />  
            <property name="linesToSkip" value="1" />
            <property name="lineMapper">  
                 <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">  
                      <property name="lineTokenizer">  
                           <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">  
                                <property name="names" value="StudentName,Percentage,DOB" />  
                                <property name="delimiter" value="|" />  
                           </bean>  
                      </property>  
                      <property name="fieldSetMapper">  
                           <bean class="com.batch.test.ExamResultItemReader" />  
                      </property>  
                 </bean>  
            </property>  
    </bean>

	<!-- Optional ItemProcessor to perform business logic/filtering on the input records -->
	<bean id="itemProcessor" class="com.batch.test.ExamResultItemProcessor" />

	<!-- Step will need a transaction manager -->
	<bean id="transactionManager" class="org.springframework.batch.support.transaction.ResourcelessTransactionManager" />

	<!-- Actual Job -->
	<batch:job id="examResultJob">
		<batch:step id="step1">
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk reader="reader" writer="databaseItemWriter"
					processor="itemProcessor" commit-interval="10" />
			</batch:tasklet>
		</batch:step>
	</batch:job>

</beans>			